/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import com.google.gson.*;
import com.google.gson.JsonParser;
import java.io.FileReader;
import java.io.IOException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Random;
import java.util.Map;

class App {

    public static void main(String[] args) throws IOException, NoSuchAlgorithmException {
        // Validate command-line arguments
        if (args.length != 2) {
            System.out.println("Usage: java -jar test.jar <Roll Number> <Path to JSON File>");
            System.exit(1);
        }

        String rollNumber = args[0].toLowerCase();  // Ensure roll number is in lowercase
        String jsonFilePath = args[1];

        // Step 1: Read and parse the JSON file using Gson
        JsonElement rootElement = JsonParser.parseReader(new FileReader(jsonFilePath));

        // Step 2: Find the first instance of "destination" key
        String destinationValue = findDestinationValue(rootElement);

        if (destinationValue == null) {
            System.out.println("Key 'destination' not found in the JSON file.");
            System.exit(1);
        }

        // Step 3: Generate a random 8-character alphanumeric string
        String randomString = generateRandomString(8);

        // Step 4: Concatenate Roll Number, Destination Value, and Random String
        String inputString = rollNumber + destinationValue + randomString;

        // Step 5: Calculate the MD5 hash
        String md5Hash = calculateMD5(inputString);

        // Step 6: Output the result in the required format
        System.out.println(md5Hash + ";" + randomString);
    }

    // Method to recursively find the first "destination" value in the JSON tree
    private static String findDestinationValue(JsonElement rootElement) {
        if (rootElement.isJsonObject()) {
            JsonObject jsonObject = rootElement.getAsJsonObject();
            if (jsonObject.has("destination")) {
                return jsonObject.get("destination").getAsString();
            }
            // Recursively check nested objects using entrySet()
            for (Map.Entry<String, JsonElement> entry : jsonObject.entrySet()) {
                String result = findDestinationValue(entry.getValue());
                if (result != null) {
                    return result;
                }
            }
        } else if (rootElement.isJsonArray()) {
            // If the root is an array, check each element
            for (JsonElement child : rootElement.getAsJsonArray()) {
                String result = findDestinationValue(child);
                if (result != null) {
                    return result;
                }
            }
        }
        return null;  // Return null if "destination" key is not found
    }

    // Method to generate a random alphanumeric string of a given length
    private static String generateRandomString(int length) {
        String characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        Random random = new Random();
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < length; i++) {
            int index = random.nextInt(characters.length());
            sb.append(characters.charAt(index));
        }
        return sb.toString();
    }

    // Method to calculate the MD5 hash of a string
    private static String calculateMD5(String input) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance("MD5");
        byte[] hashBytes = md.digest(input.getBytes());

        StringBuilder hexString = new StringBuilder();
        for (byte b : hashBytes) {
            hexString.append(String.format("%02x", b));
        }
        return hexString.toString();
    }
}
